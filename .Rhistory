evaluateSubject <- function( X, evalSubject, detectorTrain, detectorScore ) {
# Extract the training, user scoring, and impostor scoring matricies
# for the subject.  The training matrix is the first 200 password
# repetitions for the subject, corresponding to the first 4 sessions
# of passwords.  The user scoring matrix is the last 200 password
# repetitions, and the impostor scoring matrix is the first 5
# repetitions from all the other subjects.
YTrain <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex <= 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.user <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex > 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.impostor <- as.matrix( subset( X,
subset = ( subject != evalSubject &
sessionIndex == 1 &
rep <= 5 ),
select = -c( subject, sessionIndex, rep ) ) );
# Run the training and scoring procedures on the appropriate matrices
# to obtain the user and impostor scores.
dmod <- detectorTrain( YTrain );
userScores <- detectorScore( dmod, YScore.user );
impostorScores <- detectorScore( dmod, YScore.impostor );
# Use the user and impostor scores to calculate the detector's equal
# error rate for the evaluation subject.
eer <- calculateEqualError( userScores, impostorScores );
return( eer );
}
calculateAccuracy <- function( userScores, impostorScores ) {
return( eer );
}
###########################################################################
# 3. Main procedure
###########################################################################
#######################
cat("Loading the data file\n");
datafile <- 'DSL-StrongPasswordData.txt';
if( ! file.exists(datafile) )
stop( "Password data file ",datafile," does not exist");
# Retrieve the data and the list of subjects
X <- read.table( datafile, header = TRUE );
subjects <- sort( levels( X$subject ) );
# For each of the detectors, evaluate the detector on each subject,
# and record the equal-error rates in a data frame.
eers <- list();
for( detectorName in names( detectorSet ) ) {
#######################
cat("Evaluating the",detectorName,"detector\n");
detectorTrain = detectorSet[[ detectorName ]]$train;
detectorScore = detectorSet[[ detectorName ]]$score;
eers[[ detectorName ]] <- rep( NA, length(subjects) );
n <- length(subjects);
for( i in 1:n ) {
eer <- evaluateSubject( X, subjects[i],
detectorTrain = detectorTrain,
detectorScore = detectorScore );
eers[[ detectorName ]][i] <- eer;
cat("\r  ",i,"/",n,":",eer);
}
cat("\r  average equal-error:",mean(eers[[detectorName]]),"\n");
}
#######################
cat("Tabulating results:\n");
eers <- data.frame( eers );
rownames( eers ) <- subjects;
res <- data.frame(eer.mean = colMeans(eers),
eer.sd   = apply( eers, 2, sd ));
print( round( res, digits = 7 ) );
library( MASS );
library( ROCR );
library( stats );
library( matrixStats)
# Bae detector. Uses median values instaad of mean values in the
# minkowski formula. Uses a p value of 2.41
baeTrain <- function( YTrain ) {
dmod <- list( mean  = colMeans( YTrain ),
median = colMedians( YTrain),
ad = colMads(YTrain)^2,
data = YTrain,
covInv = ginv( cov( YTrain ) ) );
return( dmod );
}
baeScore <- function( dmod, YScore ) {
p <- length( dmod$mean );
n <- nrow( YScore );
if( ncol(YScore) != p ) stop("Training/test feature length mismatch ");
meanMatrix <- matrix( dmod$mean, byrow=TRUE, nrow=n, ncol=p );
medianMatrix <- matrix( dmod$median, byrow=TRUE, nrow=n, ncol=p );
adMatrix <- matrix(dmod$ad, byrow=TRUE, nrow = n, ncol=p);
scaled <- abs( YScore - meanMatrix ) %*% diag(1/dmod$ad)
manhS <- rowSums(scaled)
median <- rowSums( abs( YScore - medianMatrix ) );
manh <- rowSums( abs( YScore - meanMatrix ) );
mahal <- mahalanobis(YScore,dmod$mean,dmod$covInv,inverted=T);
bae <- rowSums(abs((YScore-medianMatrix))^.241)^(1/.241);
return( bae );
}
detectorSet = list(
bae = list( train = baeTrain,
score = baeScore ));
###########################################################################
# 2. Evaluation procedures
###########################################################################
# The calculateEqualError function takes a set of user scores and
# impostor scores, makes an ROC curve using the ROCR functionality,
# and then geometrically calculates the point at which the miss and
# false-alarm (i.e., false-negative and false-positive) rates are
# equal.
calculateEqualError <- function( userScores, impostorScores ) {
write(userScores,"user");
write(impostorScores,"impostor")
predictions <- c( userScores, impostorScores );
labels <- c( rep( 0, length( userScores ) ),
rep( 1, length( impostorScores ) ) );
pred <- prediction( predictions, labels );
missrates <- pred@fn[[1]] / pred@n.pos[[1]];
farates <- pred@fp[[1]] / pred@n.neg[[1]];
comG <- cbind(missrates,farates);
# Find the point on the ROC with miss slightly >= fa, and the point
# next to it with miss slightly < fa.
dists <- missrates - farates;
idx1 <- which( dists == min( dists[ dists >= 0 ] ) );
idx2 <- which( dists == max( dists[ dists < 0 ] ) );
stopifnot( length( idx1 ) == 1 );
stopifnot( length( idx2 ) == 1 );
stopifnot( abs( idx1 - idx2 ) == 1 );
# Extract the two points as (x) and (y), and find the point on the
# line between x and y where the first and second elements of the
# vector are equal.  Specifically, the line through x and y is:
#   x + a*(y-x) for all a, and we want a such that
#   x[1] + a*(y[1]-x[1]) = x[2] + a*(y[2]-x[2]) so
#   a = (x[1] - x[2]) / (y[2]-x[2]-y[1]+x[1])
x <- c( missrates[idx1], farates[idx1] );
y <- c( missrates[idx2], farates[idx2] );
a <- ( x[1] - x[2] ) / ( y[2] - x[2] - y[1] + x[1] );
eer <- x[1] + a * ( y[1] - x[1] );
return( eer );
}
# The evaluateSubject function takes a password-timing data frame, an
# ID for one of the subjects, and an anomaly detector's training and
# scoring functions.  It performs the training/scoring procedure for
# that subject, extracting the appropriate password-timing matrices,
# running the training and scoring functions, and then running the
# analysis to calculate the equal-error rates.  The equal-error rate
# for the subject is returned.
evaluateSubject <- function( X, evalSubject, detectorTrain, detectorScore ) {
# Extract the training, user scoring, and impostor scoring matricies
# for the subject.  The training matrix is the first 200 password
# repetitions for the subject, corresponding to the first 4 sessions
# of passwords.  The user scoring matrix is the last 200 password
# repetitions, and the impostor scoring matrix is the first 5
# repetitions from all the other subjects.
YTrain <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex <= 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.user <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex > 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.impostor <- as.matrix( subset( X,
subset = ( subject != evalSubject &
sessionIndex == 1 &
rep <= 5 ),
select = -c( subject, sessionIndex, rep ) ) );
# Run the training and scoring procedures on the appropriate matrices
# to obtain the user and impostor scores.
dmod <- detectorTrain( YTrain );
userScores <- detectorScore( dmod, YScore.user );
impostorScores <- detectorScore( dmod, YScore.impostor );
# Use the user and impostor scores to calculate the detector's equal
# error rate for the evaluation subject.
eer <- calculateEqualError( userScores, impostorScores );
return( eer );
}
calculateAccuracy <- function( userScores, impostorScores ) {
return( eer );
}
###########################################################################
# 3. Main procedure
###########################################################################
#######################
cat("Loading the data file\n");
datafile <- 'DSL-StrongPasswordData.txt';
if( ! file.exists(datafile) )
stop( "Password data file ",datafile," does not exist");
# Retrieve the data and the list of subjects
X <- read.table( datafile, header = TRUE );
subjects <- sort( levels( X$subject ) );
# For each of the detectors, evaluate the detector on each subject,
# and record the equal-error rates in a data frame.
eers <- list();
for( detectorName in names( detectorSet ) ) {
#######################
cat("Evaluating the",detectorName,"detector\n");
detectorTrain = detectorSet[[ detectorName ]]$train;
detectorScore = detectorSet[[ detectorName ]]$score;
eers[[ detectorName ]] <- rep( NA, length(subjects) );
n <- length(subjects);
for( i in 1:n ) {
eer <- evaluateSubject( X, subjects[i],
detectorTrain = detectorTrain,
detectorScore = detectorScore );
eers[[ detectorName ]][i] <- eer;
cat("\r  ",i,"/",n,":",eer);
}
cat("\r  average equal-error:",mean(eers[[detectorName]]),"\n");
}
#######################
cat("Tabulating results:\n");
eers <- data.frame( eers );
rownames( eers ) <- subjects;
res <- data.frame(eer.mean = colMeans(eers),
eer.sd   = apply( eers, 2, sd ));
print( round( res, digits = 7 ) );
covInv = ginv( cov( YTrain ) ) );
library( MASS );
library( ROCR );
library( stats );
library( matrixStats)
# Bae detector. Uses median values instaad of mean values in the
# minkowski formula. Uses a p value of 2.41
baeTrain <- function( YTrain ) {
dmod <- list( mean  = colMeans( YTrain ),
median = colMedians( YTrain),
ad = colMads(YTrain)^2,
data = YTrain,
covInv = ginv( cov( YTrain ) ) );
return( dmod );
}
baeScore <- function( dmod, YScore ) {
p <- length( dmod$mean );
n <- nrow( YScore );
if( ncol(YScore) != p ) stop("Training/test feature length mismatch ");
meanMatrix <- matrix( dmod$mean, byrow=TRUE, nrow=n, ncol=p );
medianMatrix <- matrix( dmod$median, byrow=TRUE, nrow=n, ncol=p );
adMatrix <- matrix(dmod$ad, byrow=TRUE, nrow = n, ncol=p);
scaled <- abs( YScore - meanMatrix ) %*% diag(1/dmod$ad)
manhS <- rowSums(scaled)
median <- rowSums( abs( YScore - medianMatrix ) );
manh <- rowSums( abs( YScore - meanMatrix ) );
mahal <- mahalanobis(YScore,dmod$mean,dmod$covInv,inverted=T);
bae <- rowSums(abs((YScore-medianMatrix))^.241)^(1/.241);
return( bae );
}
detectorSet = list(
bae = list( train = baeTrain,
score = baeScore ));
###########################################################################
# 2. Evaluation procedures
###########################################################################
# The calculateEqualError function takes a set of user scores and
# impostor scores, makes an ROC curve using the ROCR functionality,
# and then geometrically calculates the point at which the miss and
# false-alarm (i.e., false-negative and false-positive) rates are
# equal.
calculateEqualError <- function( userScores, impostorScores ) {
write(userScores,"user");
write(impostorScores,"impostor")
predictions <- c( userScores, impostorScores );
labels <- c( rep( 0, length( userScores ) ),
rep( 1, length( impostorScores ) ) );
pred <- prediction( predictions, labels );
missrates <- pred@fn[[1]] / pred@n.pos[[1]];
farates <- pred@fp[[1]] / pred@n.neg[[1]];
comG <- cbind(missrates,farates);
# Find the point on the ROC with miss slightly >= fa, and the point
# next to it with miss slightly < fa.
dists <- missrates - farates;
idx1 <- which( dists == min( dists[ dists >= 0 ] ) );
idx2 <- which( dists == max( dists[ dists < 0 ] ) );
stopifnot( length( idx1 ) == 1 );
stopifnot( length( idx2 ) == 1 );
stopifnot( abs( idx1 - idx2 ) == 1 );
# Extract the two points as (x) and (y), and find the point on the
# line between x and y where the first and second elements of the
# vector are equal.  Specifically, the line through x and y is:
#   x + a*(y-x) for all a, and we want a such that
#   x[1] + a*(y[1]-x[1]) = x[2] + a*(y[2]-x[2]) so
#   a = (x[1] - x[2]) / (y[2]-x[2]-y[1]+x[1])
x <- c( missrates[idx1], farates[idx1] );
y <- c( missrates[idx2], farates[idx2] );
a <- ( x[1] - x[2] ) / ( y[2] - x[2] - y[1] + x[1] );
eer <- x[1] + a * ( y[1] - x[1] );
return( eer );
}
# The evaluateSubject function takes a password-timing data frame, an
# ID for one of the subjects, and an anomaly detector's training and
# scoring functions.  It performs the training/scoring procedure for
# that subject, extracting the appropriate password-timing matrices,
# running the training and scoring functions, and then running the
# analysis to calculate the equal-error rates.  The equal-error rate
# for the subject is returned.
evaluateSubject <- function( X, evalSubject, detectorTrain, detectorScore ) {
# Extract the training, user scoring, and impostor scoring matricies
# for the subject.  The training matrix is the first 200 password
# repetitions for the subject, corresponding to the first 4 sessions
# of passwords.  The user scoring matrix is the last 200 password
# repetitions, and the impostor scoring matrix is the first 5
# repetitions from all the other subjects.
YTrain <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex <= 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.user <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex > 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.impostor <- as.matrix( subset( X,
subset = ( subject != evalSubject &
sessionIndex == 1 &
rep <= 5 ),
select = -c( subject, sessionIndex, rep ) ) );
# Run the training and scoring procedures on the appropriate matrices
# to obtain the user and impostor scores.
dmod <- detectorTrain( YTrain );
userScores <- detectorScore( dmod, YScore.user );
impostorScores <- detectorScore( dmod, YScore.impostor );
# Use the user and impostor scores to calculate the detector's equal
# error rate for the evaluation subject.
eer <- calculateEqualError( userScores, impostorScores );
return( eer );
}
calculateAccuracy <- function( userScores, impostorScores ) {
return( eer );
}
###########################################################################
# 3. Main procedure
###########################################################################
#######################
cat("Loading the data file\n");
datafile <- 'DSL-StrongPasswordData.txt';
if( ! file.exists(datafile) )
stop( "Password data file ",datafile," does not exist");
# Retrieve the data and the list of subjects
X <- read.table( datafile, header = TRUE );
subjects <- sort( levels( X$subject ) );
# For each of the detectors, evaluate the detector on each subject,
# and record the equal-error rates in a data frame.
eers <- list();
for( detectorName in names( detectorSet ) ) {
#######################
cat("Evaluating the",detectorName,"detector\n");
detectorTrain = detectorSet[[ detectorName ]]$train;
detectorScore = detectorSet[[ detectorName ]]$score;
eers[[ detectorName ]] <- rep( NA, length(subjects) );
n <- length(subjects);
for( i in 1:n ) {
eer <- evaluateSubject( X, subjects[i],
detectorTrain = detectorTrain,
detectorScore = detectorScore );
eers[[ detectorName ]][i] <- eer;
cat("\r  ",i,"/",n,":",eer);
}
cat("\r  average equal-error:",mean(eers[[detectorName]]),"\n");
}
#######################
cat("Tabulating results:\n");
eers <- data.frame( eers );
rownames( eers ) <- subjects;
res <- data.frame(eer.mean = colMeans(eers),
eer.sd   = apply( eers, 2, sd ));
print( round( res, digits = 7 ) );
library( MASS );
library( ROCR );
library( stats );
library( matrixStats)
# Bae detector. Uses median values instaad of mean values in the
# minkowski formula. Uses a p value of 2.41
baeTrain <- function( YTrain ) {
dmod <- list( mean  = colMeans( YTrain ),
median = colMedians( YTrain),
ad = colMads(YTrain)^2,
data = YTrain,
covInv = ginv( cov( YTrain ) ) );
return( dmod );
}
baeScore <- function( dmod, YScore ) {
p <- length( dmod$mean );
n <- nrow( YScore );
if( ncol(YScore) != p ) stop("Training/test feature length mismatch ");
meanMatrix <- matrix( dmod$mean, byrow=TRUE, nrow=n, ncol=p );
medianMatrix <- matrix( dmod$median, byrow=TRUE, nrow=n, ncol=p );
adMatrix <- matrix(dmod$ad, byrow=TRUE, nrow = n, ncol=p);
scaled <- abs( YScore - meanMatrix ) %*% diag(1/dmod$ad)
manhS <- rowSums(scaled)
median <- rowSums( abs( YScore - medianMatrix ) );
manh <- rowSums( abs( YScore - meanMatrix ) );
mahal <- mahalanobis(YScore,dmod$mean,dmod$covInv,inverted=T);
bae <- rowSums(abs((YScore-medianMatrix))^.241)^(1/.241);
return( bae );
}
detectorSet = list(
bae = list( train = baeTrain,
score = baeScore ));
###########################################################################
# 2. Evaluation procedures
###########################################################################
# The calculateEqualError function takes a set of user scores and
# impostor scores, makes an ROC curve using the ROCR functionality,
# and then geometrically calculates the point at which the miss and
# false-alarm (i.e., false-negative and false-positive) rates are
# equal.
calculateEqualError <- function( userScores, impostorScores ) {
write(userScores,"user");
write(impostorScores,"impostor")
predictions <- c( userScores, impostorScores );
labels <- c( rep( 0, length( userScores ) ),
rep( 1, length( impostorScores ) ) );
pred <- prediction( predictions, labels );
missrates <- pred@fn[[1]] / pred@n.pos[[1]];
farates <- pred@fp[[1]] / pred@n.neg[[1]];
comG <- cbind(missrates,farates);
# Find the point on the ROC with miss slightly >= fa, and the point
# next to it with miss slightly < fa.
dists <- missrates - farates;
idx1 <- which( dists == min( dists[ dists >= 0 ] ) );
idx2 <- which( dists == max( dists[ dists < 0 ] ) );
stopifnot( length( idx1 ) == 1 );
stopifnot( length( idx2 ) == 1 );
stopifnot( abs( idx1 - idx2 ) == 1 );
# Extract the two points as (x) and (y), and find the point on the
# line between x and y where the first and second elements of the
# vector are equal.  Specifically, the line through x and y is:
#   x + a*(y-x) for all a, and we want a such that
#   x[1] + a*(y[1]-x[1]) = x[2] + a*(y[2]-x[2]) so
#   a = (x[1] - x[2]) / (y[2]-x[2]-y[1]+x[1])
x <- c( missrates[idx1], farates[idx1] );
y <- c( missrates[idx2], farates[idx2] );
a <- ( x[1] - x[2] ) / ( y[2] - x[2] - y[1] + x[1] );
eer <- x[1] + a * ( y[1] - x[1] );
return( eer );
}
# The evaluateSubject function takes a password-timing data frame, an
# ID for one of the subjects, and an anomaly detector's training and
# scoring functions.  It performs the training/scoring procedure for
# that subject, extracting the appropriate password-timing matrices,
# running the training and scoring functions, and then running the
# analysis to calculate the equal-error rates.  The equal-error rate
# for the subject is returned.
evaluateSubject <- function( X, evalSubject, detectorTrain, detectorScore ) {
# Extract the training, user scoring, and impostor scoring matricies
# for the subject.  The training matrix is the first 200 password
# repetitions for the subject, corresponding to the first 4 sessions
# of passwords.  The user scoring matrix is the last 200 password
# repetitions, and the impostor scoring matrix is the first 5
# repetitions from all the other subjects.
YTrain <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex <= 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.user <- as.matrix( subset( X,
subset = ( subject == evalSubject &
sessionIndex > 4 ),
select = -c( subject, sessionIndex, rep ) ) );
YScore.impostor <- as.matrix( subset( X,
subset = ( subject != evalSubject &
sessionIndex == 1 &
rep <= 5 ),
select = -c( subject, sessionIndex, rep ) ) );
# Run the training and scoring procedures on the appropriate matrices
# to obtain the user and impostor scores.
dmod <- detectorTrain( YTrain );
userScores <- detectorScore( dmod, YScore.user );
impostorScores <- detectorScore( dmod, YScore.impostor );
# Use the user and impostor scores to calculate the detector's equal
# error rate for the evaluation subject.
eer <- calculateEqualError( userScores, impostorScores );
return( eer );
}
calculateAccuracy <- function( userScores, impostorScores ) {
return( eer );
}
###########################################################################
# 3. Main procedure
###########################################################################
#######################
cat("Loading the data file\n");
datafile <- 'DSL-StrongPasswordData.txt';
if( ! file.exists(datafile) )
stop( "Password data file ",datafile," does not exist");
# Retrieve the data and the list of subjects
X <- read.table( datafile, header = TRUE );
subjects <- sort( levels( X$subject ) );
# For each of the detectors, evaluate the detector on each subject,
# and record the equal-error rates in a data frame.
eers <- list();
for( detectorName in names( detectorSet ) ) {
#######################
cat("Evaluating the",detectorName,"detector\n");
detectorTrain = detectorSet[[ detectorName ]]$train;
detectorScore = detectorSet[[ detectorName ]]$score;
eers[[ detectorName ]] <- rep( NA, length(subjects) );
n <- length(subjects);
for( i in 1:n ) {
eer <- evaluateSubject( X, subjects[i],
detectorTrain = detectorTrain,
detectorScore = detectorScore );
eers[[ detectorName ]][i] <- eer;
cat("\r  ",i,"/",n,":",eer);
}
cat("\r  average equal-error:",mean(eers[[detectorName]]),"\n");
}
#######################
cat("Tabulating results:\n");
eers <- data.frame( eers );
rownames( eers ) <- subjects;
res <- data.frame(eer.mean = colMeans(eers),
eer.sd   = apply( eers, 2, sd ));
print( round( res, digits = 7 ) );
